using BookStoreApi.Models;
using BookStoreApi.Services;
using Microsoft.AspNetCore.Mvc;

namespace BookStoreApi.Controllers;

/// <summary>
/// The main controller class exposes the features of the BookService service.
/// </summary>
[ApiController]
[Route("api/[controller]")]
public class BooksController : ControllerBase
{
    private readonly BooksService _booksService;

    /// <summary>
    /// The constructor receive it main service from DI.
    /// </summary>
    /// <param name="booksService">The service used.</param>
    public BooksController(BooksService booksService) =>
        _booksService = booksService;

    /// <summary>
    /// Get all books.
    /// </summary>
    /// <returns>The list of books.</returns>
    [HttpGet]
    public async Task<List<Book>> Get() =>
        await _booksService.GetAsync();

    /// <summary>
    /// Find a bug by ID.
    /// ID is a hash generated by Mongo DB at creation. 
    /// </summary>
    /// <param name="id">The book ID.</param>
    /// <returns>The book.</returns>
    [HttpGet("{id:length(24)}")]
    public async Task<ActionResult<Book>> Get(string id)
    {
        var book = await _booksService.GetAsync(id);

        if (book is null)
        {
            return NotFound();
        }

        return book;
    }

    /// <summary>
    /// Create/Add a new book.
    /// </summary>
    /// <param name="newBook">The new book.</param>
    /// <returns></returns>
    [HttpPost]
    public async Task<IActionResult> Post(Book newBook)
    {
        await _booksService.CreateAsync(newBook);

        return CreatedAtAction(nameof(Get), new { id = newBook.Id }, newBook);
    }

    /// <summary>
    /// Update a book with new info.
    /// </summary>
    /// <param name="id">The book ID.</param>
    /// <param name="updatedBook">The book with updated info.</param>
    /// <returns></returns>
    [HttpPut("{id:length(24)}")]
    public async Task<IActionResult> Update(string id, Book updatedBook)
    {
        var book = await _booksService.GetAsync(id);

        if (book is null)
        {
            return NotFound();
        }

        updatedBook.Id = book.Id;

        await _booksService.UpdateAsync(id, updatedBook);

        return NoContent();
    }

    /// <summary>
    /// Delete a book by ID.
    /// </summary>
    /// <param name="id">The book ID.</param>
    /// <returns></returns>
    [HttpDelete("{id:length(24)}")]
    public async Task<IActionResult> Delete(string id)
    {
        var book = await _booksService.GetAsync(id);

        if (book is null)
        {
            return NotFound();
        }

        await _booksService.RemoveAsync(id);

        return NoContent();
    }
}